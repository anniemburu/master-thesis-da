# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QNgfxn1JDF98tSyww83radLyck0oWMC2
"""


import pandas as pd
import numpy as np
import json
import os


import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import tensorflow as tf

import warnings
warnings.filterwarnings("ignore")

variable_dict = {
    "531-boston" : {'norm_cat' : ['CHAS'], 'ord_cat': None, 'target' : 'MEDV', 'drop_cols' : None},
    "541-socmob" : {'norm_cat' : ['fathers_occupation', 'sons_occupation', 'family_structure', 'race'],
                    'ord_cat': None,
                    'target' : 'counts_for_sons_current_occupation', 'drop_cols' : None},
    "546-sensory" : {'norm_cat' : ['Occasion', 'Judges', 'Interval', 'Sittings','Position', 'Squares',
                                    'Rows', 'Columns', 'Halfplot', 'Trellis', 'Method'],
                     'ord_cat': None, 'target' : 'Score', 'drop_cols' : None},
    #"3050-QSAR-TID-11" : {'norm_cat' : ['CHAS'], 'ord_cat': None, 'target' : 'MEDV','drop_cols' : None},
    #"3277-QSAR-TID-10980" : {'norm_cat' : ['CHAS'], 'ord_cat': None, 'target' : 'MEDV', 'drop_cols' : None},
    "41021-Moneyball" : {'norm_cat' : ['Team', 'League','Playoffs', 'G'],
                         'ord_cat': None, 'target' : 'RS',
                         'drop_cols' : ['RankSeason', 'RankPlayoffs', 'OOBP', 'OSLG']},
    "41540-black_friday" : {'norm_cat' : ['Gender', 'Occupation', 'City_Category', 'Marital_Status',
                                          'Product_Category_1','Product_Category_2', 'Product_Category_3'],
                            'ord_cat': ['Age'], 'target' : 'Purchase',
                            'drop_cols' : None},
    "41980-SAT11-HAND-runtime-regression" : {'norm_cat' : ['algorithm'], 'ord_cat': None,
                                             'target' : 'runtime', 'drop_cols': ['row_id']},
    "42225-diamonds" : {'norm_cat' : None, 'ord_cat': ['cut', 'color', 'clarity'], 'drop_cols': None,
                        'target' : 'price'},
    "42563-house_prices_nominal" : {'norm_cat' : ['MSZoning','LotShape', 'Neighborhood'],
                                    'ord_cat': ['Street', 'Alley', 'Utilities','LotConfig', 'LandSlope','LandContour','Condition1', 'Condition2',
                                                'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl','Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond',
                                                'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating',
                                                'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType','GarageFinish',
                                                'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType',
                                                'SaleCondition'],
                                    'target' : 'SalePrice', 'drop_cols':['Id']},
    "42570-Mercedes_Benz_Greener_Manufacturing" : {'norm_cat' : ['X0','X1','X2','X3','X4','X5','X6','X8'],
                                                   'ord_cat': None,
                                                   'target' : 'y',
                                                   'drop_cols':['ID']},
    "42571-Allstate_Claims_Severity" : {'norm_cat' : [f'cat{i}' for i in range(1,117)], 'ord_cat': None,
                                        'target' : 'loss', 'drop_cols':['id']},
    "42688-Brazilian_houses" : {'norm_cat' : ['city', 'animal'], 'ord_cat': ['furniture'], 'target' : 'total_(BRL)', 'drop_cols': None},
    "42726-abalone" : {'norm_cat' : ['Sex'], 'ord_cat': None, 'target' : 'Class_number_of_rings', 'drop_cols': None},
    "42728-Airlines_DepDelay_10M" : {'norm_cat' : ['Month','DayOfWeek','UniqueCarrier', 'Origin', 'Dest'],
                                     'ord_cat': None, 'target' : 'DepDelay', 'drop_cols': None},
    "42729-nyc-taxi-green-dec-2016" : {'norm_cat' : ['VendorID', 'store_and_fwd_flag','PULocationID', 'DOLocationID', 'trip_type'],
                                       'ord_cat': None, 'target' : 'tip_amount', 'drop_cols': None},
    "42731-house_sales" : {'norm_cat' : ['zipcode'], 'ord_cat': None , 'target' : 'price', 'drop_cols':['id']},
    "43071-MIP-2016-regression" : {'norm_cat' : ['algorithm','runstatus'], 'ord_cat': None, 'target' : 'PAR10', 'drop_cols':['instance_id']},

}

#load the categorical vars json
cat_path = '/home/mburu/Master_Thesis/master-thesis-da/datasets'

with open(f"{cat_path}/variable_dict.json", "r") as json_file: #change to right path here
    variable_dict = json.load(json_file)



path = '/home/mburu/Master_Thesis/master-thesis-da/datasets'
output_path = '/home/mburu/Master_Thesis/master-thesis-da/experiments_results/version_1'
folder_names = [f for f in os.listdir(path) if os.path.isdir(os.path.join(path, f))]


class MultiXGBoostRegressor:
    def __init__(self, path, output_path, folder_names, variable_dict):
        self.path = path
        self.output_path = output_path
        self.folder_names = folder_names
        self.variable_dict = variable_dict
        self.results_df = pd.DataFrame(columns=['Model', 'Dataset', 'Train RSME', 'Test RSME', 'Train R2', 'Test R2'])

    def data_load(self, folder):
        #load train and test datasets
        train = pd.read_csv(f'{self.path}/{folder}/train_gbm.csv')
        test = pd.read_csv(f'{self.path}/{folder}/test_gbm.csv')

        #Get X and y for train and test
        X_train, y_train = train.iloc[:, :-1], train.iloc[:, -1]
        X_test, y_test = test.iloc[:, :-1], test.iloc[:, -1]

        #get categorical vars
        nominal_cat = self.variable_dict[folder]['norm_cat']
        ordinal_cat = self.variable_dict[folder]['ord_cat']

        try:
            if((nominal_cat is not None) & (ordinal_cat is not None)):
                categorical_cols = nominal_cat + ordinal_cat
            elif(nominal_cat is not None):
                categorical_cols = nominal_cat
            else:
                categorical_cols = ordinal_cat
        except:
            print('No categorical variables found')
            categorical_cols = None

        #Change the categorical variable dtype
        X_train[categorical_cols] = X_train[categorical_cols].astype('category')
        X_test[categorical_cols] = X_test[categorical_cols].astype('category')

        return X_train, y_train, X_test, y_test


    def fit(self):
        for folder in self.folder_names:
            print(f'In Dataset {folder}')
            X_train, y_train, X_test, y_test = self.data_load(folder)

            #train random forest
            self.model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=3, enable_categorical=True, verbosity = 0)
            self.model.fit(X_train, y_train)

            train_rmse, test_rmse, train_r2, test_r2 = self.predict(X_train, y_train, X_test, y_test)

             #Output
            results = {}
            results['rmse'] = [np.round(train_rmse,4), np.round(test_rmse,4)]
            results['r2'] = [np.round(train_r2,2), np.round(test_r2,2)]

            #add results to datasets
            new_row = {'Model': 'XGBoost', 'Dataset': folder, 'Train RSME': train_rmse, 'Test RSME': test_rmse, 'Train R2': train_r2, 'Test R2': test_r2}
            self.results_df = pd.concat([self.results_df, pd.DataFrame([new_row])], ignore_index=True)

            print(pd.DataFrame(results, index=['Training', 'Testing']).T)
            print('\n')

        #SAVE THE
        self.results_df.to_csv(f'{self.output_path}/xgb_re.csv', index=False)

    def predict(self, X_train, y_train, X_test, y_test):
        train_pred = self.model.predict(X_train)
        test_pred = self.model.predict(X_test)

        #calculate RMSE
        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))
        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))

        #calculate r2
        train_r2 = r2_score(y_train, train_pred)
        test_r2 = r2_score(y_test, test_pred)

        return train_rmse, test_rmse, train_r2, test_r2

mod = MultiXGBoostRegressor(path, folder_names,variable_dict)
mod.fit()