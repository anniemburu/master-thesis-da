# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QNgfxn1JDF98tSyww83radLyck0oWMC2
"""


import pandas as pd
import numpy as np
import json
import os


import lightgbm as lgb
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings("ignore")


#paths
path = '/home/mburu/Master_Thesis/master-thesis-da/datasets'
output_path = '/home/mburu/Master_Thesis/master-thesis-da/experiments_results/version_1'
folder_names = [f for f in os.listdir(path) if os.path.isdir(os.path.join(path, f))]


class MultiLightGBMRegressor:
    def __init__(self, path, output_path, folder_names):
        self.path = path
        self.output_path = output_path
        self.folder_names = folder_names
        self.results_df = pd.DataFrame(columns=['Model', 'Dataset', 'Train RSME', 'Test RSME', 'Train R2', 'Test R2'])

    def data_load(self, folder, categorical_cols):
        #load train and test datasets
        train = pd.read_csv(f'{self.path}/{folder}/train_gbm.csv')
        test = pd.read_csv(f'{self.path}/{folder}/test_gbm.csv')

        #Get X and y for train and test
        X_train, y_train = train.iloc[:, :-1], train.iloc[:, -1]
        X_test, y_test = test.iloc[:, :-1], test.iloc[:, -1]

        cols = categorical_cols[folder]

        #Change the categorical variable dtype
        X_train[categorical_cols] = X_train[cols].astype('category')
        X_test[categorical_cols] = X_test[cols].astype('category')

        return X_train, y_train, X_test, y_test


    def fit(self):
        for folder in self.folder_names:
            print(f'In Dataset : {folder}')

            #load json
            with open("/home/mburu/Master_Thesis/master-thesis-da/datasets/", "r") as json_file: #change to right path here
                categorical_cols = json.load(json_file)

            X_train, y_train, X_test, y_test = self.data_load(folder,categorical_cols)

            cat_list = list(X_train.select_dtypes('category').columns) #category list

            #encode categoricals
            encoder = LabelEncoder()
            X_train[cat_list] = X_train[cat_list].apply(encoder.fit_transform)
            X_test[cat_list] = X_test[cat_list].apply(encoder.fit_transform)

            #data loader
            train_data = lgb.Dataset(X_train, label=y_train, feature_name=list(X_train.columns), categorical_feature=list(X_train.select_dtypes('category').columns))
            test_data = lgb.Dataset(X_test, label=y_test, feature_name=list(X_test.columns), categorical_feature=list(X_test.select_dtypes('category').columns))
            
            #set parameters
            params = {"objective":"regression"}
            
            #train random forest
            self.model = lgb.train(params, train_data, valid_sets=[test_data])

            #predict
            train_rmse, test_rmse, train_r2, test_r2 = self.predict(X_train, y_train, X_test, y_test)

             #Output
            results = {}
            results['rmse'] = [np.round(train_rmse,4), np.round(test_rmse,4)]
            results['r2'] = [np.round(train_r2,2), np.round(test_r2,2)]

            #add results to datasets
            new_row = {'Model': 'LightGBM', 'Dataset': folder, 'Version' : 1,'Train RSME': train_rmse, 'Test RSME': test_rmse, 'Train R2': train_r2, 'Test R2': test_r2}
            self.results_df = pd.concat([self.results_df, pd.DataFrame([new_row])], ignore_index=True)

            print(pd.DataFrame(results, index=['Training', 'Testing']).T)
            print('\n')

        #SAVE THE
        self.results_df.to_csv(f'{self.output_path}/lightgbm_results.csv', index=False)

    def predict(self, X_train, y_train, X_test, y_test):
        train_pred = self.model.predict(X_train)
        test_pred = self.model.predict(X_test)

        #calculate RMSE
        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))
        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))

        #calculate r2
        train_r2 = r2_score(y_train, train_pred)
        test_r2 = r2_score(y_test, test_pred)

        return train_rmse, test_rmse, train_r2, test_r2

mod = MultiLightGBMRegressor(path, output_path, folder_names)
mod.fit()
